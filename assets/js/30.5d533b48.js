(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{390:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),a("h3",{attrs:{id:"父子组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子组件通信"}},[t._v("#")]),t._v(" 父子组件通信")]),t._v(" "),a("h4",{attrs:{id:"props-和-emit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props-和-emit"}},[t._v("#")]),t._v(" props 和 $emit")]),t._v(" "),a("ul",[a("li",[t._v("父组件通过"),a("code",[t._v("props")]),t._v("向子组件传递数据")]),t._v(" "),a("li",[t._v("子组件通过"),a("code",[t._v("$emit")]),t._v("事件向父组件发送消息，将自己的数据传递给父组件。")])]),t._v(" "),a("h4",{attrs:{id:"provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" provide inject")]),t._v(" "),a("ul",[a("li",[t._v("这对选项需要一起使用，父组件使用 provide 向下提供数据，其下所有子组件都可以通过inject注入，不管中间隔了多少代，都可以注入多个来自不同父级提供的数据。")]),t._v(" "),a("li",[t._v("provide 选项是一个对象或返回一个对象的函数，该对象包含可注入其子孙的属性。")]),t._v(" "),a("li",[t._v("inject 选项是一个字符串数组，或一个对象。")])]),t._v(" "),a("h3",{attrs:{id:"非父子组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非父子组件通信"}},[t._v("#")]),t._v(" 非父子组件通信")]),t._v(" "),a("h4",{attrs:{id:"通过自定义事件-eventbus事件总线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过自定义事件-eventbus事件总线"}},[t._v("#")]),t._v(" 通过自定义事件(eventBus事件总线)")]),t._v(" "),a("ul",[a("li",[t._v("这个方法是通过创建一个空的 vue 实例，当做 $emit 事件的处理中心（事件总线），通过他来触发以及监听事件，方便的实现了任意组件间的通信，包含父子，兄弟，隔代组件。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);