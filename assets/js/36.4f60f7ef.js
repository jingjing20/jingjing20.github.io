(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{397:function(v,_,e){"use strict";e.r(_);var a=e(42),o=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[e("strong",[v._v("缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。这是缓存运作的一个整体流程图：")])]),v._v(" "),e("p",[e("img",{attrs:{src:"http://image.jinghao.xyz/blog/20200525/NxymCYULoGFU.png",alt:"mark"}})]),v._v(" "),e("blockquote",[e("p",[v._v("图片来源——"),e("a",{attrs:{href:"https://juejin.im/post/5eb7f811f265da7bbc7cc5bd",target:"_blank",rel:"noopener noreferrer"}},[v._v("政采云前端团队"),e("OutboundLink")],1)])]),v._v(" "),e("p",[v._v("接下来以三个部分来学习一下浏览器的缓存机制：")]),v._v(" "),e("ul",[e("li",[v._v("强缓存")]),v._v(" "),e("li",[v._v("协商缓存")]),v._v(" "),e("li",[v._v("缓存的位置")])]),v._v(" "),e("h2",{attrs:{id:"_1、强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、强缓存"}},[v._v("#")]),v._v(" 1、强缓存")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("强缓存不需要发送 "),e("code",[v._v("HTTP")]),v._v(" 请求。")])]),v._v(" "),e("li",[e("p",[v._v("是否强缓存由 "),e("code",[v._v("Expires")]),v._v("、"),e("code",[v._v("Cache-Control")]),v._v(" 和 "),e("code",[v._v("Pragma")]),v._v(" 3 个 "),e("code",[v._v("Header")]),v._v(" 属性共同来控制。")])])]),v._v(" "),e("hr"),v._v(" "),e("p",[e("code",[v._v("HTTP/1.0")]),v._v("时期，是否强缓存使用的是"),e("code",[v._v("Expires")]),v._v("，而"),e("code",[v._v("HTTP/1.1")]),v._v("使用的是"),e("code",[v._v("Cache-Control")]),v._v("。让我们首先来看看"),e("code",[v._v("Expires")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Expires")]),v._v(" 即过期时间，存在于服务器返回的响应头中，其用于告诉浏览器在某个时间之前可以直接从缓存里面获取数据，不需要再次向服务器发送请求。")]),v._v(" "),e("li",[e("code",[v._v("Expires")]),v._v(" 的优先级在三个 "),e("code",[v._v("Header")]),v._v(" 属性中是最低的。")])]),v._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[v._v("缺点")]),v._v(" "),e("p",[v._v("用 "),e("code",[v._v("Expires")]),v._v(" 这个属性来控制是否使用强缓存有一个坑，就是有时候服务器的时间和浏览器的时间可能并不一致。导致服务器返回的这个过期时间不准确。所以 "),e("code",[v._v("Expires")]),v._v(" 很快在后来的 HTTP1.1 版本中被抛弃了。")])]),v._v(" "),e("h3",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("Cache-Control")]),v._v(" 是 "),e("code",[v._v("HTTP/1.1")]),v._v(" 中新增的属性。")])]),v._v(" "),e("li",[e("p",[v._v("在请求头和响应头中都可以使用，它和 "),e("code",[v._v("Expires")]),v._v(" 本质的不同在于它并没有采用具体的过期时间点这个方式，而是"),e("strong",[v._v("采用过期时长")]),v._v("来控制缓存，对应的字段是"),e("code",[v._v("max-age")]),v._v("。")])])]),v._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[v._v("Cache"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v("max"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("age"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("600")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br")])]),e("p",[v._v("上面代码代表服务器返回响应之后 10 分钟内可以直接使用缓存。")]),v._v(" "),e("p",[e("strong",[v._v("其他 "),e("code",[v._v("Cache-Control")]),v._v(" 常用属性如下：")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("public：响应可以被中间代理、CDN 等缓存。")])]),v._v(" "),e("li",[e("p",[v._v("private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应。")])]),v._v(" "),e("li",[e("p",[v._v("must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证")])]),v._v(" "),e("li",[e("p",[v._v("no-store：禁止使用缓存。")])]),v._v(" "),e("li",[e("p",[v._v("no-cache: 跳过当前的强缓存，发送 HTTP 请求，即直接进入协商缓存阶段。")])])]),v._v(" "),e("p",[e("strong",[v._v("当 Expires 和 Cache-Control 同时存在的时候， Cache-Control 会优先考虑。")])]),v._v(" "),e("h3",{attrs:{id:"pragma"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[v._v("#")]),v._v(" Pragma")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("Pragma")]),v._v(" 是一个在 "),e("code",[v._v("HTTP/1.0")]),v._v(" 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 "),e("code",[v._v("HTTP/1.0")]),v._v(" 协议的缓存服务器，那时候 "),e("code",[v._v("HTTP/1.1")]),v._v(" 协议中的 "),e("code",[v._v("Cache-Control")]),v._v(" 还没有出来。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Pragma")]),v._v(" 只有一个属性值，就是 "),e("code",[v._v("no-cache")]),v._v(" ，效果和 "),e("code",[v._v("Cache-Control")]),v._v(" 中的 "),e("code",[v._v("no-cache")]),v._v(" 一致，不使用强缓存，需要与服务器验证缓存是否新鲜。")])])]),v._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),e("p",[v._v("由于 "),e("code",[v._v("Pragma")]),v._v(" 在 "),e("code",[v._v("HTTP")]),v._v(" 响应中的行为没有确切规范，所以不能可靠替代 "),e("code",[v._v("HTTP/1.1")]),v._v(" 中通用首部 "),e("code",[v._v("Cache-Control")]),v._v("，尽管在请求中，假如 "),e("code",[v._v("Cache-Control")]),v._v(" 不存在的话，它的行为与 "),e("code",[v._v("Cache-Control: no-cache")]),v._v(" 一致。建议只在需要兼容 "),e("code",[v._v("HTTP/1.0")]),v._v(" 客户端的场合下应用 "),e("code",[v._v("Pragma")]),v._v(" 首部。")])]),v._v(" "),e("h2",{attrs:{id:"_2、协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、协商缓存"}},[v._v("#")]),v._v(" 2、协商缓存")]),v._v(" "),e("p",[v._v("当浏览器的强缓存失效，或者请求头中设置了不走强缓存的时候。浏览器在请求头中携带 "),e("code",[v._v("If-Modified-Since")]),v._v(" 和 "),e("code",[v._v("If-None-Match")]),v._v(" 这两个属性来向服务器发请求，由服务器根据这两个属性来决定是否使用缓存，这就是"),e("strong",[v._v("协商缓存。")])]),v._v(" "),e("h3",{attrs:{id:"last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[v._v("#")]),v._v(" Last-Modified")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("Last-Modified")]),v._v(" 即最后修改时间，在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，值为服务器返回数据的最后修改时间。")])]),v._v(" "),e("li",[e("p",[v._v("浏览器接收到后，如果再次发起同一个请求，会在请求头中携带"),e("code",[v._v("If-Modified-Since")]),v._v(" 这个字段，这个字段的值也就是服务器传来的最后修改时间。")])]),v._v(" "),e("li",[e("p",[v._v("服务器拿到请求头中 "),e("code",[v._v("If-Modified-Since")]),v._v(" 字段后，就拿它的值与服务器中该资源的最后修改时间相比一下。")])]),v._v(" "),e("li",[e("p",[v._v("如果请求头中的这个值小于最后修改时间，说明资源已经更新了。需要返回新的资源，跟常规的 "),e("code",[v._v("HTTP")]),v._v(" 请求响应的流程一样。")])]),v._v(" "),e("li",[e("p",[v._v("否则说明资源没有发生改变，直接返回 304，告诉浏览器使用缓存。")])])]),v._v(" "),e("h3",{attrs:{id:"etag-资源唯一标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-资源唯一标识"}},[v._v("#")]),v._v(" ETag（资源唯一标识）")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("ETag")]),v._v(" 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会改变。在浏览器第一次给服务器发送请求后，服务器会通过响应头把这个值（请求资源的 "),e("code",[v._v("ETag")]),v._v("）给浏览器。")])]),v._v(" "),e("li",[e("p",[v._v("浏览器接收到 "),e("code",[v._v("ETag")]),v._v(" 的值后，会在下次请求时将这个值作为"),e("code",[v._v("If-None-Match")]),v._v(" 这个属性的值放到请求头中，然后发给服务器。")])]),v._v(" "),e("li",[e("p",[v._v("服务器接收到 "),e("code",[v._v("If-None-Match")]),v._v(" 后，会跟服务器上该资源的 "),e("code",[v._v("ETag")]),v._v(" 进行对比。")])]),v._v(" "),e("li",[e("p",[v._v("如果两者不一样，说明要更新了。返回新的资源，跟常规的 "),e("code",[v._v("HTTP")]),v._v(" 请求响应的流程一样。")])]),v._v(" "),e("li",[e("p",[v._v("否则说明资源没有发生改变，直接返回 304，告诉浏览器使用缓存。")])])]),v._v(" "),e("h3",{attrs:{id:"last-modified-vs-etag-资源唯一标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-vs-etag-资源唯一标识"}},[v._v("#")]),v._v(" Last-Modified VS ETag（资源唯一标识）")]),v._v(" "),e("p",[v._v("在精准度上，"),e("code",[v._v("ETag")]),v._v(" 优于 "),e("code",[v._v("Last-Modified")]),v._v("。因为 "),e("code",[v._v("ETag")]),v._v(" 是按照内容给资源生成唯一标识，因此能准确感知资源的变化。而 "),e("code",[v._v("Last-Modified")]),v._v(" 就不一样了，它在一些特殊的情况并不能准确感知资源变化，主要有两种情况:")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("1、如果文件的"),e("font",{attrs:{color:"red"}},[e("strong",[v._v("修改频率在秒级以下")])]),v._v("，"),e("code",[v._v("Last-Modified/If-Modified-Since")]),v._v(" 会错误地返回 304")],1)]),v._v(" "),e("li",[e("p",[v._v("2、"),e("font",{attrs:{color:"red"}},[e("strong",[v._v("如果文件被修改了，但是内容没有任何变化")])]),v._v("的时候，Last-Modified/If-Modified-Since 也会错误地返回 304")],1)])]),v._v(" "),e("p",[v._v("在性能上，"),e("code",[v._v("Last-Modified")]),v._v(" 优于 "),e("code",[v._v("ETag")]),v._v("，也很简单理解，"),e("code",[v._v("Last-Modified")]),v._v(" 仅仅只是记录一个时间点，而 "),e("code",[v._v("Etag")]),v._v(" 需要根据文件的具体内容生成哈希值。")]),v._v(" "),e("p",[e("font",{attrs:{color:"red"}},[e("strong",[v._v("如果两种方式都支持的话，服务器会优先考虑 "),e("code",[v._v("ETag")]),v._v("。")])])],1)])}),[],!1,null,null,null);_.default=o.exports}}]);